{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eliza\\\\\\xC1rea de Trabalho\\\\carrinho-2\\\\src\\\\hooks\\\\useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { api } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem(\"@RocketShoes:cart\");\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const productExistingInCart = cart.find(product => product.id === productId);\n      let cartCopy = [];\n\n      if (productExistingInCart) {\n        const responseStock = await api.get(`/stock/${productId}`);\n        const QtdOfProductExistingInCart = productExistingInCart ? productExistingInCart.amount : 0;\n\n        if (QtdOfProductExistingInCart < responseStock.data.amount) {\n          cartCopy = cart.map(item => {\n            if (item.id === productId) {\n              return { ...item,\n                amount: item.amount + 1\n              };\n            }\n\n            return item;\n          });\n        } else {\n          toast.error(\"Quantidade solicitada fora de estoque\");\n          return;\n        }\n      } else {\n        const response = await api.get(`/products/${productId}`);\n        cartCopy = [...cart, { ...response.data,\n          amount: 1\n        }];\n      }\n\n      setCart(cartCopy);\n      localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(cartCopy));\n    } catch {\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const product = cart.find(item => item.id === productId);\n\n      if (product) {\n        const newCart = cart.filter(item => item.id !== product.id);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(newCart));\n        setCart(newCart);\n      } else {\n        throw new Error();\n      }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      if (amount <= 0) return;\n      const response = await api.get(`/stock/${productId}`);\n\n      if (amount < response.data.amount) {\n        const newCart = cart.map(item => {\n          if (item.id === productId) {\n            return { ...item,\n              amount\n            };\n          }\n\n          return item;\n        });\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(newCart));\n        setCart(newCart);\n      } else {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n    } catch {\n      toast.error(\"Erro na alteração de quantidade do produto\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"WanC+H4F5XAlaEUwRPGCePnR438=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/eliza/Área de Trabalho/carrinho-2/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","productExistingInCart","find","product","id","cartCopy","responseStock","get","QtdOfProductExistingInCart","amount","data","map","item","error","response","setItem","stringify","removeProduct","newCart","filter","Error","updateProductAmount","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { api } from \"../services/api\";\nimport { Product } from \"../types\";\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem(\"@RocketShoes:cart\");\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      const productExistingInCart = cart.find(\n        (product) => product.id === productId\n      );\n\n      let cartCopy: Product[] = [];\n\n      if (productExistingInCart) {\n        const responseStock = await api.get(`/stock/${productId}`);\n\n        const QtdOfProductExistingInCart = productExistingInCart\n          ? productExistingInCart.amount\n          : 0;\n\n        if (QtdOfProductExistingInCart < responseStock.data.amount) {\n          cartCopy = cart.map((item) => {\n            if (item.id === productId) {\n              return {\n                ...item,\n                amount: item.amount + 1,\n              };\n            }\n\n            return item;\n          });\n        } else {\n          toast.error(\"Quantidade solicitada fora de estoque\");\n          return;\n        }\n      } else {\n        const response = await api.get(`/products/${productId}`);\n        cartCopy = [...cart, { ...response.data, amount: 1 }];\n      }\n\n      setCart(cartCopy);\n      localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(cartCopy));\n    } catch {\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      const product = cart.find((item) => item.id === productId);\n\n      if (product) {\n        const newCart = cart.filter((item) => item.id !== product.id);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(newCart));\n        setCart(newCart);\n      } else {\n        throw new Error();\n      }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      if (amount <= 0) return;\n\n      const response = await api.get(`/stock/${productId}`);\n\n      if (amount < response.data.amount) {\n        const newCart = cart.map((item) => {\n          if (item.id === productId) {\n            return {\n              ...item,\n              amount,\n            };\n          }\n\n          return item;\n        });\n\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(newCart));\n        setCart(newCart);\n      } else {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n    } catch {\n      toast.error(\"Erro na alteração de quantidade do produto\");\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}