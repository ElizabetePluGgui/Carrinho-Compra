{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eliza\\\\\\xC1rea de Trabalho\\\\carrinho-2\\\\src\\\\hooks\\\\useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { api } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem(\"@CarrinhoCompras:cart\");\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const productExistingInCart = cart.find(product => product.id === productId);\n      let cartCopy = [];\n\n      if (productExistingInCart) {\n        const responseStock = await api.get(`/stock/${productId}`);\n        const QtdOfProductExistingInCart = productExistingInCart ? productExistingInCart.amount : 0;\n\n        if (QtdOfProductExistingInCart < responseStock.data.amount) {\n          cartCopy = cart.map(item => {\n            if (item.id === productId) {\n              return { ...item,\n                amount: item.amount + 1\n              };\n            }\n\n            return item;\n          });\n        } else {\n          toast.error(\"Adicione outro Bombom, esse acabou!\");\n          return;\n        }\n      } else {\n        const response = await api.get(`/products/${productId}`);\n        cartCopy = [...cart, { ...response.data,\n          amount: 1\n        }];\n      }\n\n      setCart(cartCopy);\n      localStorage.setItem(\"@CarrinhoCompras:cart\", JSON.stringify(cartCopy));\n    } catch {\n      toast.error(\"Erro ao adicionar produto\");\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const product = cart.find(item => item.id === productId);\n\n      if (product) {\n        const newCart = cart.filter(item => item.id !== product.id);\n        localStorage.setItem(\"@CarrinhoCompras:cart\", JSON.stringify(newCart));\n        setCart(newCart);\n      } else {\n        throw new Error();\n      }\n    } catch {\n      toast.error(\"Erro ao remover o produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      if (amount <= 0) return;\n      const response = await api.get(`/stock/${productId}`);\n\n      if (amount < response.data.amount) {\n        const newCart = cart.map(item => {\n          if (item.id === productId) {\n            return { ...item,\n              amount\n            };\n          }\n\n          return item;\n        });\n        localStorage.setItem(\"@CarrinhoCompras:cart\", JSON.stringify(newCart));\n        setCart(newCart);\n      } else {\n        toast.error(\"Adicione outro Bombom, esse acabou!\");\n        return;\n      }\n    } catch {\n      toast.error(\"Erro ao alterar a quantidade do produto! Tente de novo.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CartProvider, \"qHaawyrnvJNutE/YVCtuyZpeMPs=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/eliza/Área de Trabalho/carrinho-2/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","productExistingInCart","find","product","id","cartCopy","responseStock","get","QtdOfProductExistingInCart","amount","data","map","item","error","response","setItem","stringify","removeProduct","newCart","filter","Error","updateProductAmount","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { api } from \"../services/api\";\r\nimport { Product } from \"../types\";\r\n\r\ninterface CartProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\ninterface UpdateProductAmount {\r\n    productId: number;\r\n    amount: number;\r\n}\r\n\r\ninterface CartContextData {\r\n    cart: Product[];\r\n    addProduct: (productId: number) => Promise<void>;\r\n    removeProduct: (productId: number) => void;\r\n    updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\r\n}\r\n\r\nconst CartContext = createContext<CartContextData>({} as CartContextData);\r\n\r\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\r\n    const [cart, setCart] = useState<Product[]>(() => {\r\n        const storagedCart = localStorage.getItem(\"@CarrinhoCompras:cart\");\r\n\r\n        if (storagedCart) {\r\n            return JSON.parse(storagedCart);\r\n        }\r\n\r\n        return [];\r\n    });\r\n\r\n    const addProduct = async (productId: number) => {\r\n        try {\r\n            const productExistingInCart = cart.find(\r\n                (product) => product.id === productId\r\n            );\r\n\r\n            let cartCopy: Product[] = [];\r\n\r\n            if (productExistingInCart) {\r\n                const responseStock = await api.get(`/stock/${productId}`);\r\n\r\n                const QtdOfProductExistingInCart = productExistingInCart\r\n                    ? productExistingInCart.amount\r\n                    : 0;\r\n\r\n                if (QtdOfProductExistingInCart < responseStock.data.amount) {\r\n                    cartCopy = cart.map((item) => {\r\n                        if (item.id === productId) {\r\n                            return {\r\n                                ...item,\r\n                                amount: item.amount + 1,\r\n                            };\r\n                        }\r\n\r\n                        return item;\r\n                    });\r\n                } else {\r\n                    toast.error(\"Adicione outro Bombom, esse acabou!\");\r\n                    return;\r\n                }\r\n            } else {\r\n                const response = await api.get(`/products/${productId}`);\r\n                cartCopy = [...cart, { ...response.data, amount: 1 }];\r\n            }\r\n\r\n            setCart(cartCopy);\r\n            localStorage.setItem(\r\n                \"@CarrinhoCompras:cart\",\r\n                JSON.stringify(cartCopy)\r\n            );\r\n        } catch {\r\n            toast.error(\"Erro ao adicionar produto\");\r\n        }\r\n    };\r\n\r\n    const removeProduct = (productId: number) => {\r\n        try {\r\n            const product = cart.find((item) => item.id === productId);\r\n\r\n            if (product) {\r\n                const newCart = cart.filter((item) => item.id !== product.id);\r\n                localStorage.setItem(\r\n                    \"@CarrinhoCompras:cart\",\r\n                    JSON.stringify(newCart)\r\n                );\r\n                setCart(newCart);\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        } catch {\r\n            toast.error(\"Erro ao remover o produto\");\r\n        }\r\n    };\r\n\r\n    const updateProductAmount = async ({\r\n        productId,\r\n        amount,\r\n    }: UpdateProductAmount) => {\r\n        try {\r\n            if (amount <= 0) return;\r\n\r\n            const response = await api.get(`/stock/${productId}`);\r\n\r\n            if (amount < response.data.amount) {\r\n                const newCart = cart.map((item) => {\r\n                    if (item.id === productId) {\r\n                        return {\r\n                            ...item,\r\n                            amount,\r\n                        };\r\n                    }\r\n\r\n                    return item;\r\n                });\r\n\r\n                localStorage.setItem(\r\n                    \"@CarrinhoCompras:cart\",\r\n                    JSON.stringify(newCart)\r\n                );\r\n                setCart(newCart);\r\n            } else {\r\n                toast.error(\"Adicione outro Bombom, esse acabou!\");\r\n                return;\r\n            }\r\n        } catch {\r\n            toast.error(\r\n                \"Erro ao alterar a quantidade do produto! Tente de novo.\"\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <CartContext.Provider\r\n            value={{ cart, addProduct, removeProduct, updateProductAmount }}\r\n        >\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useCart(): CartContextData {\r\n    const context = useContext(CartContext);\r\n\r\n    return context;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}